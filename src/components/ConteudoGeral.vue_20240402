<template>
    <v-app>
        <v-card class="board pa-4 h-screen d-flex flex-row overflow-x-auto gap-2 w-100 rounded-0" color="grey-darken-4">
			<v-card v-for="status in statuses" :key="status.id" class="d-flex flex-column coluna" color="grey-darken-3" style="border-top: 3px orange solid">
				
				<TituloStatus :statusId="status.id" :statusTitle="status.title" :abrirModalNovaTarefa="openNovaTarefaModal"></TituloStatus>
				
				<div class="overflow-y-auto px-2">
					<VueDraggable v-model="status.tasks" class="cardContainer d-flex flex-column gap-2" group="statuses"
						animation="250" ghostClass="ghost" :data-status_id="status.id" @start="drag" @dragover="handleDragOver" @dragleave="handleDragLeave" @end="drop">
						
						<v-card v-for="task in status.tasks" 
							:key="task.id" 
							class="card h-10 cursor-grab pa-2"
							:class="corClara(task.background_color) ? 'text-dark' : 'text-light'" 
							:data-task_id="task.id"
							:data-order="task.order" 
							:style="{
								backgroundColor: task.background_color,
								borderTop: `2px solid ${tornarCorMaisIntensa(task.background_color)}`,
								borderRight: `2px solid ${tornarCorMaisIntensa(task.background_color)}`,
								borderBottom: `2px solid ${tornarCorMaisIntensa(task.background_color)}`,
								borderLeft: `2px solid ${tornarCorMaisIntensa(task.background_color)}`
							}"
						>
							<v-card class="elevation-0" color="transparent">
								<div class="d-flex justify-space-between">
									<span>{{ task.title }} - ordem: {{ task.order }}</span>

									<v-tooltip text="Opções" location="end">
										<template v-slot:activator="{ props }">
											<i v-bind="props" class="bi bi-three-dots opcoes" @click="opcoes"></i>
										</template>
									</v-tooltip>
								</div>
							</v-card>
						</v-card>
					</VueDraggable>
				</div>
            </v-card>
        </v-card>
    </v-app>

	<!-- modal -->
    <v-dialog v-model="modalNovaTarefaOpen" max-width="500px" persistent>
		<v-card color="grey-darken-3">
			<v-card-title>
				<span class="headline">Nova tarefa</span>
			</v-card-title>
			<v-card-text>
				<v-row>
					<v-col cols="12" md="12">
						<v-text-field v-model="taskTitle" :counter="10" label="Título" hide-details required></v-text-field>
					</v-col>

					<v-col class="cols-12 md-12">
						<v-textarea label="Descrição" v-model="taskDescription"></v-textarea>
					</v-col>
				</v-row>

				<!-- DROPDOWN de seleção de cores -->
				<div>
					<v-menu open-on-click transition="slide-y-transition">
						<template v-slot:activator="{ props }">
							<v-btn color="primary" v-bind="props">Cor da tarefa</v-btn>
						</template>

						<v-card class="py-2 px-6" color="grey-darken-3">
							<div class="text-center text-button">Selecione</div>
							<div v-for="(cor, index_cores) in cores" :key="index_cores">
								<div class="d-flex justify-center align-center">
									<div class="rounded-circle" v-for="(hexa, index_hexas) in cor.hexas" :key="index_hexas">
										<v-btn
											icon="mdi-circle"
											variant="text"
											:style="{color: hexa}"
											:data-cor_hexadecimal="hexa"
											@click="selecionarCorTarefa(hexa)"
										></v-btn>
									</div>
								</div>
							</div>
						</v-card>
					</v-menu>

					<v-icon v-if="corTarefaSelecionada != ''" icon="mdi-circle" :style="{color: corTarefaSelecionada}" end></v-icon>
					<span v-else class="ml-3">Nenhuma selecionada</span>
				</div>
			</v-card-text>

			<v-card-actions class="justify-space-between">
				<v-btn color="blue darken-1" text @click="closeNovaTarefaModal">Fechar</v-btn>
				<v-btn color="blue darken-1" text @click="criarTarefa">Salvar</v-btn>
			</v-card-actions>
		</v-card>
    </v-dialog>

	<!-- toastAtivo -->
	<ToastPopup 
		:toastMessage="'toastMessage'"
		cor="green"
		v-model="toastAtivo"
	></ToastPopup>
</template>

<script>
import { defineComponent, ref, onMounted } from 'vue';
import { VueDraggable } from 'vue-draggable-plus';
import ToastPopup from './ToastPopup.vue'
import TituloStatus from './TituloStatus.vue';
// import CardTarefa from './CardTarefa.vue';

import axios from 'axios'
export default defineComponent({
	name: 'ConteudoGeral',
	components: {
		VueDraggable,
		ToastPopup,
		TituloStatus,
		// CardTarefa
	},
	setup() {
		const statuses = ref([])
		const taskShow = ref()
		const modalNovaTarefaOpen = ref(false);
		const taskTitle = ref('')
		const taskDescription = ref('')
		const corTarefaSelecionada = ref('')
		const novaTarefaStatusId = ref(null)
		const toastAtivo = ref(false)
		const toastMessage = ref('')

		const cores = [
			{
				nome: 'vermelho',
				hexas: ['#EF9A9A','#E57373','#EF5350','#F44336']
			},
			{
				nome: 'roxo',
				hexas: ['#CE93D8', '#BA68C8', '#AB47BC', '#9C27B0']
			},
			{
				nome: 'azul',
				hexas: ['#90CAF9', '#64B5F6', '#42A5F5', '#2196F3']
			},
			{
				nome: 'verde',
				hexas: ['#A5D6A7', '#81C784', '#66BB6A', '#4CAF50']
			},
			{
				nome: 'amarelo',
				hexas: ['#FFF176', '#FFEE58', '#FFEB3B', '#FDD835']
			},
			{
				nome: 'laranja',
				hexas: ['#FFCC80', '#FFB74D', '#FFA726', '#FF9800']
			}			
		];

		const openNovaTarefaModal = (event) => {
			novaTarefaStatusId.value = event.target.dataset.status_id
			modalNovaTarefaOpen.value = true;
		};

		const closeNovaTarefaModal = () => {
			novaTarefaStatusId.value = null
			modalNovaTarefaOpen.value = false;
			taskTitle.value = ''
			taskDescription.value = ''
			corTarefaSelecionada.value = ''
		};

		const selecionarCorTarefa = (hexa) => {
			corTarefaSelecionada.value = hexa;
		}

		const drag = () => {
			// console.log(event.item.dataset.task_id)
		}

		const handleDragOver = (event) => {
			let cardContainer = event.target.closest('.cardContainer')

			if (cardContainer) {
				cardContainer.classList.add('cardContainerBorder')
			}
		}

		const handleDragLeave = () => {
			removerBordas()
		}

		const removerBordas = () => {
			let cardContainers = document.querySelectorAll('.cardContainer')
			cardContainers.forEach(item => {
				item.classList.remove('cardContainerBorder')
			})
		}

		const drop = async (event) => {
			// Dados da coluna antiga
			let status_to = event.to
			let children_status_to = await status_to.children;
			let tasks_status_to = []

			// Dados da coluna nova
			let status_from = event.from
			let children_status_from = await status_from.children;
			let tasks_status_from = []

			// Construindo o array que registra os cards da coluna antiga
			for (let i = 0; i < children_status_to.length; i++) {
				tasks_status_to.push({
					id: children_status_to[i].dataset.task_id,
					order: i
				})
			}

			// Construindo o array que registra os cards da coluna nova
			for (let i = 0; i < children_status_from.length; i++) {
				tasks_status_from.push({
					id: children_status_from[i].dataset.task_id,
					order: i
				})
			}

			await axios.post('http://localhost:8000/api/changeTaskStatus', {
				status_to_id: status_to.dataset.status_id,
				tasks_status_to: tasks_status_to,
				status_from_id: status_from.dataset.status_id,
				tasks_status_from: tasks_status_from
			})

			removerBordas()			

			busca()
		}

		const busca = async () => {
			let res = await axios.get('http://localhost:8000/api/statuses')
			statuses.value = res.data
		}

		const criarTarefa = async () => {
			let status_id = novaTarefaStatusId.value
			
			let req  = await axios.post('http://localhost:8000/api/task', {
				task_status_id: status_id,
				title: taskTitle.value,
				description: taskDescription.value,
				background_color: corTarefaSelecionada.value
			})

			toastAtivo.value = true
			toastMessage.value = req.data.message
			closeNovaTarefaModal()
			busca()
		}

		// Função que usa a fórmula "YIQ" que serve pra detectar se a cor é clara ou escura
		const corClara = (hexColor) => {
			// Remover o '#' do valor hexadecimal
			hexColor = hexColor.replace('#', '');

			// Converter o valor hexadecimal para RGB
			const r = parseInt(hexColor.substr(0, 2), 16);
			const g = parseInt(hexColor.substr(2, 2), 16);
			const b = parseInt(hexColor.substr(4, 2), 16);

			// Calcular a luminosidade relativa (Y) usando a fórmula YIQ
			const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;

			// Definir um limiar para decidir se a cor é clara ou escura
			const threshold = 128;

			// Comparar a luminosidade relativa com o limiar e retornar verdadeiro se for maior (cor clara)
			return yiq >= threshold;
		}

		const tornarCorMaisIntensa = (cor) => {
			let fator = 1.5
			// Extrair os componentes R, G e B da cor
			let r = parseInt(cor.substring(1, 3), 16);
			let g = parseInt(cor.substring(3, 5), 16);
			let b = parseInt(cor.substring(5, 7), 16);

			// Aplicar o fator para tornar a cor mais intensa
			r = Math.min(Math.floor(r / fator), 255);
			g = Math.min(Math.floor(g / fator), 255);
			b = Math.min(Math.floor(b / fator), 255);

			// Converter os valores R, G e B de volta para hexadecimal
			r = r.toString(16).padStart(2, '0');
			g = g.toString(16).padStart(2, '0');
			b = b.toString(16).padStart(2, '0');


			// Retornar a nova cor em formato hexadecimal
			return `#${r}${g}${b}`;
		}

		// abre um modal da tarefa
		const opcoes = async (event) => {
			let card = event.target.closest('.card');
			let task_id = card.dataset.task_id
			let dados = await axios.get(`http://localhost:8000/api/task/${task_id}`)
			taskShow.value = dados.data
			document.getElementById('a').innerText = taskShow.value.description
		}


		onMounted(() => {
			busca();
		});

		return {
			drag,
			drop,
			statuses,
			corClara,
			opcoes,
			handleDragOver,
			handleDragLeave,
			modalNovaTarefaOpen,
			openNovaTarefaModal,
			closeNovaTarefaModal,
			cores,
			taskTitle,
			taskDescription,
			corTarefaSelecionada,
			selecionarCorTarefa,
			criarTarefa,
			toastAtivo,
			toastMessage,
			tornarCorMaisIntensa
		};
	},
});
</script>

<style scoped>

.board {
	width: 98%;
	display: flex;
	flex-direction: row;
	gap: 10px;
	overflow-x: auto;
	height: 95vh;
	padding: 10px;
}

.coluna {
	min-width: 250px;
	max-width: 250px;
	height: 90vh;
}

.cardContainerBorder {
	border: 3px dashed #9b95a5;
	background-color: transparent;
	padding: 2px 2px;
}

.card {
	min-height: 60px;
	height: auto;
	max-width: 250px;
}

.ghost {
	opacity: 0;
	background-color: #f4f4f4;
}

.opcoes {
	cursor: pointer;
}

</style>